#+TITLE: Refuse Manual
#+STARTUP: entitiesplain noindent
#+OPTIONS: ^:nil todo:nil tags:nil num:2 H:1 prop:nil p:t broken-links:mark

* RefUse - Retrieve references from PDFs and use them!
:PROPERTIES:
:CUSTOM_ID: refuse---retrieve-references-from-pdfs
:END:
** Overview
:PROPERTIES:
:CUSTOM_ID: overview-1
:END:

RefUse is an Emacs interface to [[https://github.com/inukshuk/anystyle][=anystyle=]], an open-source software based on
powerful machine-learning algorithms. It requires =anystyle-cli=, which can be
installed with =[sudo] gem install anystyle-cli=. Note that =ruby= and =gem=
must already be present in the system. =ruby= is shipped with MacOS, but you
will have to install it on other operating systems; please refer to the
relevant section in the official documentation for =ruby=. You may also want to
consult the [[https://rubydoc.info/gems/anystyle][=anystyle= documentation]] to learn more about how it works.

Once =anystyle-cli= is installed, RefUse can be launched with
=orb-note-actions= while in an Org-roam buffer containing a =#+ROAM_KEY:=
BibTeX key. References are retrieved from a PDF file associated with the note
which is retrieved from the corresponding BibTeX record.

The reference-retrieval process consists of three interactive steps described
below.

** Text mode
:PROPERTIES:
:CUSTOM_ID: text-mode
:END:

In the first step, the PDF file is searched for references, which are
eventually output in the RefUse buffer as plain text. The buffer is in the
=text-mode= major-mode for editing general text files.

You need to review the retrieved references and prepare them for the next step
in such a way that there is only one reference per line. You may also need to
remove any extra text captured together with the references. Some PDF files
will produce a nicely-formed list of references that will require little to no
manual editing, while others will need a different degree of manual
intervention.

Generally, it is possible to train a custom =anystyle= finder model responsible
for PDF-parsing to improve the output quality, but this is not currently
supported by RefUse. As a small and somewhat naïve aid, the =sanitize text=
command bound to =C-c C-u= may assist in putting each reference onto a separate
line.

After you are finished with editing the text data, press =C-c C-c= to proceed
to the second step.

Press =C-x C-s= to save your progress or =C-x C-w= to write the text references
into a file.

Press =C-c C-k= anytime to abort the RefUse process.

** BibTeX mode
:PROPERTIES:
:CUSTOM_ID: bibtex-mode
:END:

In the second step, the obtained list of plain text references, one reference
per line, is parsed and converted into BibTeX format. The resulting BibTeX
records are presented to the user in the RefUse buffer replacing the
text references. The buffer's major mode switches to =bibtex-mode=, which is
helpful for reviewing and editing the BibTeX data and correcting possible
parsing errors.

Again, depending on the citation style used in the particular book or article,
the parsing quality can vary greatly and might require more or less manual
post-editing. It is possible to train a custom =anystyle= parser model to
improve the parsing quality. See [[#training-a-parser-model][Training a Parser model]] for more details.

Press =C-c C-u= to generate BibTeX keys for the records in the buffer or =C-u
C-c C-u= to generate a key for the record at point.  During key generation, it
is also possible to automatically set the values of BibTeX fields: see
=refuse-set-fields= docstring for more details.

Press =C-x C-s= to save your progress or =C-x C-w= to write the BibTeX entries
into a file.

Press =C-c C-r= to return to the text-editing mode in its last state.  Note
that all the progress in BibTeX mode will be lost.

Press =C-c C-c= to proceed to the third step. If the BibTeX buffer was edited
and the changes were not saved, e.g. by pressing =C-x C-s=, you will be
prompted to generated BibTeX keys by default. The variable
=refuse-pdf-prompt-to-generate-keys= more finely controls this behaviour.

** Org mode
:PROPERTIES:
:CUSTOM_ID: org-mode
:END:

In the third step, the BibTeX records are processed internally by RefUse, and
the result replaces the BibTeX data in the RefUse, which switches to
=org-mode=.

The processing involves sorting the references into four groups under the
respective Org-mode headlines: =in-roam=, =in-bib=, =valid=, and =invalid=, and
inserting the grouped references as either an Org-mode plain-list of
=org-ref=-style citations, or an Org-mode table with columns corresponding to
different BibTeX fields.

- =in-roam= --- These references have notes with the respective =#+ROAM_KEY:=
  citation keys in the =org-roam= database.
- =in-bib= --- These references are not yet in the =org-roam= database but they
  are present in user BibTeX file(s) (see =bibtex-completion-bibliography=).
- =invalid= --- These references matched against
  =refuse-invalid-key-pattern= and are considered invalid.  Adjust
  this variable to your criteria of validity.
- =valid= --- All other references fall into this group. They look fine but are
  not yet in user Org-roam and BibTeX databases.

Set =refuse-group-references= to nil if you do not need reference
grouping.

Review and edit the generated Org-mode data, or press =C-c C-c= to insert the
references into the note's buffer and finish the RefUse.

Press =C-x C-s= to save your progress or =C-x C-w= to write the Org data into a
file.

Press =C-c C-r= to return to BibTeX editing mode in its last state. Note that
all the progress in current mode will be lost.

The following user variables control the appearance of the generated Org-mode
data: =refuse-group-references=, =refuse-grouped-export=,
=refuse-ungrouped-export=, =refuse-table-export-fields=,
=refuse-list-style=, =refuse-reference-numbers=,
=refuse-citekey-format=.  These variables can be set through the
Customize interface or with =setq=. Refer to their respective docstrings in
Emacs for more information.

** Exporting data generated by RefUse
:PROPERTIES:
:CUSTOM_ID: exporting-data-generated-by-refuse
:END:

The different types of data generated by RefUse -- text, BibTeX and Org - can
be exported to the buffer of origin or an external file. By default, only the
Org data is exported to the buffer of origin.  Different export options can be
set in =refuse-export-options=. Consult its docstring for a detailed
explanation. The following example demonstrates various possibilities.

#+begin_example
  (setq refuse-export-options
        '((org  ;; <= TYPE
           ;;  Export to a heading in the buffer of origin
           (heading "References (extracted by RefUse)"
           ;; ^             ^
           ;; TARGET     LOCATION
                       ;; PROPERTIES
                       ;;    v
                       :property-drawer ("PDF_SCRAPPER_TYPE"
                                         "PDF_SCRAPPER_SOURCE"
                                         "PDF_SCRAPPER_DATE")))
          (txt
           ;; Export to a file "references.org"
           (path "references.org"
                 ;; under a heading "New references"
                 :placement
                 (heading "New references"
                          :property-drawer ("PDF_SCRAPPER_TYPE"
                                            "PDF_SCRAPPER_SOURCE"
                                            "PDF_SCRAPPER_DATE")
                          ;; Put the new heading in front of other headings
                          :placement prepend)))
          (bib
           ;; Export to a file in an existing directory.  The file name will be CITEKEY.bib
           (path "/path/to/references-dir/"
                 :placement prepend
                ;; Include only the references that are not in the target file
                ;; *and* the file(s) specified in bibtex-completion-bibliography
                 :filter-bib-entries bibtex-completion-bibliography))))
#+end_example

** Training a Parser model
:PROPERTIES:
:CUSTOM_ID: training-a-parser-model
:END:
*** Prerequisites
:PROPERTIES:
:CUSTOM_ID: prerequisites
:END:

Currently, the core data set (explained below) must be installed manually by
the user as follows:

1. Use =find=, =locate= or similar tools to find the file =core.xml= buried in
   =res/parser/= subdirectory of =anystyle= gem, e.g. =locate core.xml | grep
   anystyle=. On MacOS, with =anystyle= installed as a system gem, the file
   path would look similar to:

   ="/Library/Ruby/Gems/2.6.0/gems/anystyle-1.3.11/res/parser/core.xml"=

   The actual path will vary slightly depending on the
   currently-installed versions of =ruby= and =anystyle=.

   On Linux and Windows, this path will be different.

2. Copy this file into the location specified in
   =refuse-anystyle-parser-training-set=, or anywhere else where you have
   disk-write access, and adjust the aforementioned variable accordingly.

*** Running a training session
:PROPERTIES:
:CUSTOM_ID: running-a-training-session
:END:

Training a custom parser model on custom user data will greatly improve the
parsing of plain-text references. A training session can be initiated by
pressing =C-c C-t= in the RefUse buffer in either text-mode or BibTeX-mode. In
each case, the plain-text references obtained in the =text mode= step described
above will be used to generate source XML data for a training set.

The generated XML data replaces the text or the BibTeX references in the RefUse
buffer, and the major-mode switches to =xml-mode=.

The XML data must be edited manually---this is the whole point of creating a
custom training model---which usually consists in simply correcting the
placement of bibliographic data within the XML elements (data fields). It is
extremely important to review the source data carefully since any mistakes here
will make its way into the model, thereby leading to poorer parsing in the
future.

It would be quite tedious to create the whole data-set by hand--- hundreds or
thousands of individual bibliographic records---so the best workflow for making
a good custom data-set is to use the core data-set shipped with =anystyle= and
append to it several data-sets generated in RefUse training sessions from
individual PDF files, incrementally re-training the model in between. This
approach is implemented in RefUse. From personal experience, adding references
data incrementally from 4--5 PDF files raises the parser success rate to
virtually 100%. Follow the instructions described in [[#parser-model-prerequisites][Prerequisites]] to install
the core data-set.

Once the editing is done, press =C-c C-c= to train the model. The XML data in
the RefUse buffer will be automatically appended to the custom =core.xml= file
which will be used for training.  Alternatively, press =C-c C-t= to review the
updated =core.xml= file and press =C-c C-c= when finished.

The major mode will now switch to =fundamental-mode=, and the =anystyle=
=stdout= output will appear in the buffer. Training the model can take /several
minutes/, depending on the size of the training data-set and the computing
resources available on your device. The process is run in a shell subprocess,
so you will be able to continue your work and return to RefUse buffer later.

Once the training is complete, press =C-c C-c= to return to the previous
editing-mode. You can now re-generate the BibTeX data and see the improvements
achieved with the re-trained model.

* RefUse Anystyle - Emacs interfeace to Anystyle-CLI
:PROPERTIES:
:CUSTOM_ID: refuse-anystyle
:END:
The function =refuse-anystyle= provides a convenient Elisp key--value
interface to =anystyle-cli=, and can be used anywhere else within Emacs.
Check its docstring for more information. You may also want to consult
[[https://rubydoc.info/gems/anystyle][=anystyle-cli= documentation]].

** Example
:PROPERTIES:
:CUSTOM_ID: example
:END:
This Elisp expression:

#+begin_example
  (refuse-anystyle 'parse
                :format 'bib
                :stdout nil
                :overwrite t
                :input "Doe2020.txt "
                :output "bib"
                :parser-model "/my/custom/model.mod")
#+end_example

...executes the following anystyle call:

#+begin_example
  anystyle --no-stdout --overwrite -F "/my/custom/model.mod" -f bib parse "Doe2020.txt" "bib"
#+end_example

The following variables can be used to configure =refuse-anystyle= and the
default command-line options that will be passed to =anystyle=:

** =refuse-anystyle=
:PROPERTIES:
:CUSTOM_ID: refuse-anystyle-1
:END:

- =refuse-anystyle-executable=
- =refuse-anystyle-user-directory=
- =refuse-anystyle-default-buffer=

** Default command-line options
:PROPERTIES:
:CUSTOM_ID: default-command-line-options
:END:

- =refuse-anystyle-find-crop=
- =refuse-anystyle-find-layout=
- =refuse-anystyle-find-solo=
- =refuse-anystyle-finder-training-set=
- =refuse-anystyle-finder-model=
- =refuse-anystyle-parser-model=
- =refuse-anystyle-parser-training-set=
- =refuse-anystyle-pdfinfo-executable=
- =refuse-anystyle-pdftotext-executable=
